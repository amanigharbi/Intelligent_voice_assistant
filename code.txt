
'''
The below code must be stored in a JSON file so that the python program can access it whenver needed.
{"intents": [
  {
    "tag": "greeting",
    "patterns": ["Hey", "Hello", "Hi", "What's up?", "Good Day"],
    "responses": ["Hello there!", "Hello, what can I do for you?"]
  },
  {
    "tag": "create_note",
    "patterns": ["New note", "Create a note"],
    "responses": [""]
  },
  {
    "tag": "add_todo",
    "patterns": ["New item", "Add an item"],
    "responses": [""]
  },
  {
    "tag": "show_todos",
    "patterns": ["Show my todos", "What is on my list"],
    "responses": [""]
  },
  {
    "tag": "exit",
    "patterns": ["Bye", "See you", "Quit", "Exit"],
    "responses": ["Thank you for spending time with me."]
  },
]}
'''
'''
def create_note():
    global recognizer  # Making the variable global
    speaker.say("What do you want to write as note?")
    speaker.runAndWait()  # Asking for user input
    done = True
    # The try block is used in case the microphone fails
    while done:
        try:
            with speech_recognition.Microphone() as mic:
                recognizer.adjust_for_ambient_noise(mic, duration=0.2)
                # Accepting user voice input
                audio = recognizer.listen(mic)
                note = recognizer.recognize_google(audio)
                note = note.lower()
                speaker.say("Choose a filename!")
                speaker.runAndWait()
                recognizer.adjust_for_ambient_noise(mic, duration=0.2)
                # Accepting user filename
                audio = recognizer.listen(mic)
                filename = recognizer.recognize_google(audio)
                filename = filename.lower()
            with open(filename, 'w') as f:
                f.write(note)
                done = False
                # Terminating the while loop if listened properly
                speaker.say("New note successfully created")
                speaker.runAndWait()
        except speech_recognition.UnknownValueError:
            recognizer = speech_recognition.Recognizer()
            speaker.say("I did not understand you. Please try again!")
            speaker.runAndWait()


# Speaking out the list
def show_todo():
    speaker.say("Your list contains the following elements")
    for item in todo_list:
        speaker.say(item)
    speaker.runAndWait()


# Adding elements to a todo list
def add_todo():
    global recognizer
    speaker.say("What item do you want to add?")
    speaker.runAndWait()
    done = True
    while done:
        try:
            with speech_recognition.Microphone() as mic:
                recognizer.adjust_for_ambient_noise(mic, duration=0.3)
                audio = recognizer.listen(mic)
                item = recognizer.recognize_google(audio)
                item = item.lower()
                todo_list.append(item)
                done = False
                speaker.say(item + " was added to the list!")
                speaker.runAndWait()
        except speech_recognition.UnknownValueError:
            recognizer = speech_recognition.Recognizer()
            speaker.say("I'm sorry, can you repeat it again!")
            speaker.runAndWait()

'''



import speech_recognition as sr
import pyttsx3 as tts
#from neuralintents import GenericAssistant
from TrainingModel import TrainingModel
import sys
import random
import json
import gtts
from playsound import playsound

recognizer = sr.Recognizer()
speaker = tts.init()
speaker.setProperty('rate', 150)  # rate is property, 150 is the value
with open('intents.json', encoding="utf8") as json_data:
    intents = json.load(json_data)
engine = tts.init()

for voice in engine.getProperty('voices'):
    print("aaaaaaaaa ",voice)


# Greeting the user
def hello():
    for intent in intents['intents']:
        while intent['tag'] == "greeting":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break


def salutation():

    for intent in intents['intents']:
        while intent['tag'] == "salutation":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break
def التحية():
    for intent in intents['intents']:
        while intent['tag'] == "التحية":
            reponse = random.choice(intent['responses'])
            print(reponse)
            t=gtts.gTTS(reponse,lang="ar")
            t.save("arabe.mp3")
            playsound("arabe.mp3")
            break

def time():
    for intent in intents['intents']:
        while intent['tag'] == "Times":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break
def heure():
    for intent in intents['intents']:
        while intent['tag'] == "Heures":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break
def العمل():
    for intent in intents['intents']:
        while intent['tag'] == "اوقات العمل":
            reponse = random.choice(intent['responses'])
            print(reponse)
            t=gtts.gTTS(reponse,lang="ar")
            t.save("arabe.mp3")
            playsound("arabe.mp3")
            break
def OpenToday():
    for intent in intents['intents']:
        while intent['tag'] == "OpenToday":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break
def OuvertAujourdhui():
    for intent in intents['intents']:
        while intent['tag'] == "OuvertAujourdhui":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break
def thank():
    for intent in intents['intents']:
        while intent['tag'] == "Thank":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break
def Merci():
    for intent in intents['intents']:
        while intent['tag'] == "Merci":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break
def الشكر():
    for intent in intents['intents']:
        while intent['tag'] == "شكرا لك":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break
# Exiting from your assistant
def close():
    for intent in intents['intents']:
        while intent['tag'] == "exit":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            sys.exit(0)
def exit():
    for intent in intents['intents']:
        while intent['tag'] == "Exit":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            sys.exit(0)

def المغادرة():
    for intent in intents['intents']:
        while intent['tag'] == "إلى اللقاء":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            sys.exit(0)
def choiseLang():
    recognizer = sr.Recognizer()
    try:
        print('choose a language...')
        speaker.say("choose a language")
        speaker.runAndWait()
        with sr.Microphone() as mic:
            recognizer.adjust_for_ambient_noise(mic, duration=0.2)
            audio = recognizer.listen(mic)
            lang = recognizer.recognize_google(audio,language="fr-FR,en-US,ar-AR")
            lang = lang.lower()
            print(lang)
            if lang == "english" or lang == "anglais":
                lang = "anglais"
            elif lang == "french" or lang == "francais":
                lang = "francais"
            elif lang == "arabic" or lang == "arabe":
                lang = "arabe"
            else:
                speaker.say("I'm sorry, can you repeat it again!")
                speaker.runAndWait()
        return lang
    except sr.UnknownValueError:
        speaker.say("I'm sorry, can you repeat it again!")
        speaker.runAndWait()




language = choiseLang()
print(language)
if language=="anglais":
    mappings = {
        "greeting": hello,
        "Times": time,
        "OpenToday": OpenToday,
        "Thank" : thank,
        "exit": close,

    }

    # Training a model to recognize the intents
    assistant = TrainingModel('intents.json', intent_methods=mappings)
    assistant.train_model()
    # assistant.request()


    while True:
        try:
            with sr.Microphone() as mic:
                recognizer.adjust_for_ambient_noise(mic, duration=0.2)
                audio = recognizer.listen(mic)
                message = recognizer.recognize_google(audio,language="en-US")
                message = message.lower()
                print(message)
            assistant.request(message)
        except sr.UnknownValueError:
            recognizer = sr.Recognizer()
            speaker.say("I'm sorry, can you repeat it again!")
            speaker.runAndWait()
if language=="francais":
    mappings = {
        "salutation": salutation,
        "Heures": heure,
        "OuvertAujourdhui": OuvertAujourdhui,
        "Merci" : Merci,
        "Exit": exit,

    }

    # Training a model to recognize the intents
    assistant =TrainingModel('intents.json', intent_methods=mappings)
    assistant.train_model()
    # assistant.request()

    while True:
        try:
            with sr.Microphone() as mic:
                recognizer.adjust_for_ambient_noise(mic, duration=0.2)
                audio = recognizer.listen(mic)
                message = recognizer.recognize_google(audio,language="fr-FR")
                message = message.lower()
                print(message)

            assistant.request(message)
        except sr.UnknownValueError:
            recognizer = sr.Recognizer()
            speaker.say("Je ne comprend pas répéte SVP!")
            speaker.runAndWait()
if language=="arabe":
    mappings = {
        "التحية": التحية,
        "اوقات العمل": العمل,
         "شكرا لك" : الشكر,
        "إلى اللقاء" : المغادرة


    }

    # Training a model to recognize the intents
    assistant = TrainingModel('intents.json', intent_methods=mappings)
    assistant.train_model()
    # assistant.request()


    while True:
        try:
            with sr.Microphone() as mic:
                recognizer.adjust_for_ambient_noise(mic, duration=0.2)
                audio = recognizer.listen(mic)
                message = recognizer.recognize_google(audio,language="ar-QA")
                message = message.lower()
                print(message)
            assistant.request(message)
        except sr.UnknownValueError:
            recognizer = sr.Recognizer()
            speaker.say("لم افهم حاول مرة أخرى")
            speaker.runAndWait()




import speech_recognition as sr
import pyttsx3 as tts
#from neuralintents import GenericAssistant
from TrainingModel import TrainingModel
import sys
import random
import json
import gtts
from playsound import playsound

recognizer = sr.Recognizer()
speaker = tts.init()
speaker.setProperty('rate', 150)  # rate is property, 150 is the value
with open('intents.json', encoding="utf8") as json_data:
    intents = json.load(json_data)
engine = tts.init()

for voice in engine.getProperty('voices'):
    print("aaaaaaaaa ",voice)


# Greeting the user
def hello():
    for intent in intents['intents']:
        while intent['tag'] == "greeting":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break


def salutation():

    for intent in intents['intents']:
        while intent['tag'] == "salutation":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break
def التحية():
    for intent in intents['intents']:
        while intent['tag'] == "التحية":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break

def time():
    for intent in intents['intents']:
        while intent['tag'] == "Times":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break
def heure():
    for intent in intents['intents']:
        while intent['tag'] == "Heures":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break
def العمل():
    for intent in intents['intents']:
        while intent['tag'] == "اوقات العمل":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break
def OpenToday():
    for intent in intents['intents']:
        while intent['tag'] == "OpenToday":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break
def OuvertAujourdhui():
    for intent in intents['intents']:
        while intent['tag'] == "OuvertAujourdhui":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break
def thank():
    for intent in intents['intents']:
        while intent['tag'] == "Thank":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break
def Merci():
    for intent in intents['intents']:
        while intent['tag'] == "Merci":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break
def الشكر():
    for intent in intents['intents']:
        while intent['tag'] == "شكرا لك":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break
# Exiting from your assistant
def close():
    for intent in intents['intents']:
        while intent['tag'] == "exit":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            sys.exit(0)
def exit():
    for intent in intents['intents']:
        while intent['tag'] == "Exit":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            sys.exit(0)

def المغادرة():
    for intent in intents['intents']:
        while intent['tag'] == "إلى اللقاء":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            sys.exit(0)
def choiseLang():
    recognizer = sr.Recognizer()
    try:
        print('choose a language...')
        speaker.say("choose a language")
        speaker.runAndWait()
        with sr.Microphone() as mic:
            recognizer.adjust_for_ambient_noise(mic, duration=0.2)
            audio = recognizer.listen(mic)
            lang = recognizer.recognize_google(audio,language="fr-FR,en-US,ar-AR")
            lang = lang.lower()
            print(lang)
            if lang == "english" or lang == "anglais":
                lang = "anglais"
            elif lang == "french" or lang == "français":
                lang = "francais"
            elif lang == "arabic" or lang == "arabe":
                lang = "arabe"
            else:
                speaker.say("I'm sorry, can you repeat it again!")
                speaker.runAndWait()
        return lang
    except sr.UnknownValueError:
        speaker.say("I'm sorry, can you repeat it again!")
        speaker.runAndWait()




language = choiseLang()
print(language)
if language=="anglais":
    mappings = {
        "greeting": hello,
        "Times": time,
        "OpenToday": OpenToday,
        "Thank" : thank,
        "exit": close,

    }

    # Training a model to recognize the intents
    assistant = TrainingModel('intents.json', intent_methods=mappings)
    assistant.train_model()
    # assistant.request()


    while True:
        try:
            with sr.Microphone() as mic:
                recognizer.adjust_for_ambient_noise(mic, duration=0.2)
                audio = recognizer.listen(mic)
                message = recognizer.recognize_google(audio,language="en-US")
                message = message.lower()
                print(message)
            assistant.request(message)
        except sr.UnknownValueError:
            recognizer = sr.Recognizer()
            speaker.say("I'm sorry, can you repeat it again!")
            speaker.runAndWait()
if language=="francais":
    mappings = {
        "salutation": salutation,
        "Heures": heure,
        "OuvertAujourdhui": OuvertAujourdhui,
        "Merci" : Merci,
        "Exit": exit,

    }

    # Training a model to recognize the intents
    assistant =TrainingModel('intents.json', intent_methods=mappings)
    assistant.train_model()
    # assistant.request()

    while True:
        try:
            with sr.Microphone() as mic:
                recognizer.adjust_for_ambient_noise(mic, duration=0.2)
                audio = recognizer.listen(mic)
                message = recognizer.recognize_google(audio,language="fr-FR")
                message = message.lower()
                print(message)

            assistant.request(message)
        except sr.UnknownValueError:
            recognizer = sr.Recognizer()
            speaker.say("Je ne comprend pas répéte SVP!")
            speaker.runAndWait()
if language=="arabe":
    mappings = {
        "التحية": التحية,
        "اوقات العمل": العمل,
         "شكرا لك" : الشكر,
        "إلى اللقاء" : المغادرة


    }

    # Training a model to recognize the intents
    assistant = TrainingModel('intents.json', intent_methods=mappings)
    assistant.train_model()
    # assistant.request()


    while True:
        try:
            with sr.Microphone() as mic:
                recognizer.adjust_for_ambient_noise(mic, duration=0.2)
                audio = recognizer.listen(mic)
                message = recognizer.recognize_google(audio,language="ar-SA")
                message = message.lower()
                print(message)
            assistant.request(message)
        except sr.UnknownValueError:
            recognizer = sr.Recognizer()
            speaker.say("لم افهم حاول مرة أخرى")
            print("لم افهم حاول مرة أخرى")
            speaker.runAndWait()

model=TrainingModel("intents.json")
model.train_model()
try:
    with sr.Microphone() as mic:
        recognizer.adjust_for_ambient_noise(mic, duration=0.2)
        audio = recognizer.listen(mic)
        message = recognizer.recognize_google(audio)
        message = message.lower()
        print(message)
        a=model.request(message)
        print(a)
        speaker.say(a)
except sr.UnknownValueError:
    recognizer = sr.Recognizer()
    speaker.say("aaaaa")
    speaker.runAndWait()



//version nv


import speech_recognition as sr
import pyttsx3 as tts
#from neuralintents import GenericAssistant
from TrainingModel import TrainingModel
import sys
import random
import json
import gtts
from playsound import playsound

recognizer = sr.Recognizer()
speaker = tts.init()
speaker.setProperty('rate', 150)  # rate is property, 150 is the value
voices = speaker.getProperty('voices')
with open('intents.json', encoding="utf8") as json_data:
    intents = json.load(json_data)



def choiseLang():
    recognizer = sr.Recognizer()
    while True:
        print('choose a language...')
        speaker.setProperty("voice", voices[-2].id)
        speaker.say("choose a language")
        speaker.runAndWait()
        try:
            with sr.Microphone() as mic:
                recognizer.adjust_for_ambient_noise(mic, duration=0.2)
                audio = recognizer.listen(mic)
                lang = recognizer.recognize_google(audio,language="fr-FR,ar-SA,en-US")
                lang = lang.lower()
                print(lang)
                if lang == "english" or lang == "anglais":
                    lang = "anglais"
                elif lang == "french" or lang == "français":
                    lang = "francais"
                elif lang == "arabic" or lang == "arabe":
                    lang = "arabe"
                else:
                    speaker.say("I'm sorry, can you repeat it again!")
                    speaker.runAndWait()
            return lang
        except sr.UnknownValueError:
            speaker.say("I'm sorry, try again!")
            speaker.runAndWait()

def execute(recognizer,pos,lang,msg):
    # Training a model to recognize the intents
    assistant = TrainingModel('intents.json')
    assistant.train_model()

    while True:
        try:
            with sr.Microphone() as mic:
                recognizer.adjust_for_ambient_noise(mic, duration=0.2)
                audio = recognizer.listen(mic)
                message = recognizer.recognize_google(audio,language=lang)
                message = message.lower()
                print(message)
                reponse=assistant.request(message)
                print(reponse)
                speaker.setProperty("voice", voices[pos].id)
                speaker.say(reponse)
                speaker.runAndWait()
        except sr.UnknownValueError:
            recognizer = sr.Recognizer()
            speaker.setProperty("voice", voices[pos].id)
            speaker.say(msg)
            speaker.runAndWait()


language = choiseLang()
print(language)
if language=="anglais":
    execute(recognizer,-2,"en-US","I'm sorry, can you repeat it again!")
if language=="francais":
    execute(recognizer,-3, "fr-FR", "Je ne comprend pas répéte s'il vous plait!")
if language=="arabe":
    execute(recognizer,-1,"ar-SA","لم افهم حاول مرة أخرى")

    //nv

    from flask import Flask, render_template, request, redirect
import speech_recognition as sr
import pyttsx3 as tts
#from neuralintents import GenericAssistant
from TrainingModel import TrainingModel
import sys
import random
import json
import gtts
from playsound import playsound

recognizer = sr.Recognizer()
speaker = tts.init()
speaker.setProperty('rate', 150)  # rate is property, 150 is the value
voices = speaker.getProperty('voices')
with open('intents.json', encoding="utf8") as json_data:
    intents = json.load(json_data)

# Greeting the user
def hello():
    for intent in intents['intents']:
        while intent['tag'] == "greeting":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break


def salutation():

    for intent in intents['intents']:
        while intent['tag'] == "salutation":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break
def التحية():
    for intent in intents['intents']:
        while intent['tag'] == "التحية":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break

def time():
    for intent in intents['intents']:
        while intent['tag'] == "Times":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break
def heure():
    for intent in intents['intents']:
        while intent['tag'] == "Heures":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break
def العمل():
    for intent in intents['intents']:
        while intent['tag'] == "اوقات العمل":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break
def OpenToday():
    for intent in intents['intents']:
        while intent['tag'] == "OpenToday":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break
def OuvertAujourdhui():
    for intent in intents['intents']:
        while intent['tag'] == "OuvertAujourdhui":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break
def thank():
    for intent in intents['intents']:
        while intent['tag'] == "Thank":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break
def Merci():
    for intent in intents['intents']:
        while intent['tag'] == "Merci":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break
def الشكر():
    for intent in intents['intents']:
        while intent['tag'] == "شكرا لك":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            break
# Exiting from your assistant
def close():
    for intent in intents['intents']:
        while intent['tag'] == "exit":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            sys.exit(0)
def exit():
    for intent in intents['intents']:
        while intent['tag'] == "Exit":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            sys.exit(0)

def المغادرة():
    for intent in intents['intents']:
        while intent['tag'] == "إلى اللقاء":
            reponse = random.choice(intent['responses'])
            print(reponse)
            speaker.say(reponse)
            speaker.runAndWait()
            sys.exit(0)

def choiseLang():
    recognizer = sr.Recognizer()
    while True:
        print('choose a language...')
        speaker.setProperty("voice", voices[-2].id)
        speaker.say("choose a language")
        speaker.runAndWait()
        try:
            with sr.Microphone() as mic:
                recognizer.adjust_for_ambient_noise(mic, duration=0.2)
                audio = recognizer.listen(mic)
                lang = recognizer.recognize_google(audio,language="fr-FR,ar-SA,en-US")
                lang = lang.lower()
                print(lang)
                if lang == "english" or lang == "anglais":
                    lang = "anglais"
                elif lang == "french" or lang == "français":
                    lang = "francais"
                elif lang == "arabic" or lang == "arabe":
                    lang = "arabe"
                else:
                    speaker.say("I'm sorry, can you repeat it again!")
                    speaker.runAndWait()
            return lang
        except sr.UnknownValueError:
            speaker.say("I'm sorry, try again!")
            speaker.runAndWait()
#assistant = TrainingModel('intents.json')
#assistant.train_model()
#print("train")
#assistant.save_model("VoiceBot")
#print("ok")
def prepare(recognizer,mappings,pos,lang,msg):
    # Training a model to recognize the intents
    assistant = TrainingModel('intents.json', intent_methods=mappings)
    print("load")
    assistant.load_model("VoiceBot")

    try:
        with sr.Microphone() as mic:
            recognizer.adjust_for_ambient_noise(mic, duration=0.2)
            audio = recognizer.listen(mic)
            message = recognizer.recognize_google(audio,language=lang)
            message = message.lower()
            print(message)
            reponse=assistant.request(message)
            print(reponse)
            speaker.setProperty("voice", voices[pos].id)
            speaker.say(reponse)
            speaker.runAndWait()
    except sr.UnknownValueError:
        recognizer = sr.Recognizer()
        speaker.setProperty("voice", voices[pos].id)
        speaker.say(msg)
        speaker.runAndWait()

def execute():
    language = choiseLang()
    print(language)
    if language=="anglais":
        mappings = {
            "greeting": hello,
            "Times": time,
            "OpenToday": OpenToday,
            "Thank" : thank,
            "exit": close,

        }
        prepare(recognizer,mappings,-2,"en-US","I'm sorry, can you repeat it again!")
    if language=="francais":
        mappings = {
            "salutation": salutation,
            "Heures": heure,
            "OuvertAujourdhui": OuvertAujourdhui,
            "Merci" : Merci,
            "Exit": exit,

        }
        prepare(recognizer,mappings,-3, "fr-FR", "Je ne comprend pas répéte s'il vous plait!")
    if language=="arabe":
        mappings = {
            "التحية": التحية,
            "اوقات العمل": العمل,
             "شكرا لك" : الشكر,
            "إلى اللقاء" : المغادرة


        }

        prepare(recognizer,mappings,-1,"ar-SA","لم افهم حاول مرة أخرى")
app = Flask(__name__)
@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "POST":
        print("FORM DATA RECEIVED")
        choiseLang()

    return render_template('index.html')


if __name__ == "__main__":
    app.run(debug=True)

//app.py

app = Flask(__name__)
@app.route("/", methods=["GET", "POST"])
def index():
    speaker = tts.init()
    speaker.setProperty('rate', 150)  # rate is property, 150 is the value
    voices = speaker.getProperty('voices')
    if request.method == "POST":
        print("FORM DATA RECEIVED")
        recognizer = sr.Recognizer()

        with sr.Microphone() as mic:
            recognizer.adjust_for_ambient_noise(mic, duration=0.2)
            audio = recognizer.listen(mic)
            lang = recognizer.recognize_google(audio, language="fr-FR")
            lang = lang.lower()
            print(lang)
            assistant = TrainingModel('intents.json')
            print("load")
            assistant.load_model("VoiceBot")
            voice=assistant.request(lang)
            Gtts = gTTS(voice)
            Gtts.save('reponse.mp3')
            playsound.playsound("reponse.mp3")
        return voice

    return render_template('index.html')


if __name__ == "__main__":
    app.run(debug=True)

